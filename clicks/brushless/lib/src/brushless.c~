/*
 * MikroSDK - MikroE Software Development Kit
 * CopyrightÂ© 2020 MikroElektronika d.o.o.
 * 
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, 
 * publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
 * OR OTHER DEALINGS IN THE SOFTWARE. 
 */

/*!
 * \file
 *
 */

#include "brushless.h"

// ------------------------------------------------------------- PRIVATE MACROS 

#define PWM_PERIOD_ERROR   0

// -------------------------------------------------------------- PRIVATE TYPES


// ------------------------------------------------------------------ CONSTANTS


// ------------------------------------------------------------------ VARIABLES


// ---------------------------------------------- PRIVATE FUNCTION DECLARATIONS 


// ------------------------------------------------ PUBLIC FUNCTION DEFINITIONS

void brushless_cfg_setup ( brushless_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->pwm = HAL_PIN_NC;
    cfg->an_pin = HAL_PIN_NC;
    
    // Additional gpio pins

    cfg->dir = HAL_PIN_NC;
    cfg->int_pin = HAL_PIN_NC;

	cfg->dev_pwm_base 	  = MODULE_TIM_1;
	cfg->dev_pwm_channel  = TIM_CHANNEL_NC;
	cfg->dev_pwm_polarity = TIM_ACTIVE_LOW;
	cfg->dev_pwm_freq 	  = brushless_DEF_FREQ;

    cfg->channel      = ADC_CHANNEL_NC;
    cfg->resolution   = ADC_RESOLUTION_DEFAULT;
    cfg->vref         = ADC_VREF_DEFAULT;
}

BRUSHLESS_RETVAL brushless_init ( brushless_t *ctx, brushless_cfg_t *cfg )
{
    pwm_config_t pwm_cfg;
    analog_in_config_t adc_cfg;
    
    pwm_configure_default( &pwm_cfg );

	pwm_cfg.pin      = cfg->pwm;
	pwm_cfg.base     = cfg->dev_pwm_base;
	pwm_cfg.channel  = cfg->dev_pwm_channel;
	pwm_cfg.polarity = cfg->dev_pwm_polarity;
	pwm_cfg.freq_hz  = cfg->dev_pwm_freq;

    ctx->pwm_freq = cfg->dev_pwm_freq;
    ctx->pwm_period = pwm_open( &ctx->pwm, &pwm_cfg );

    if ( ctx->pwm_period == PWM_PERIOD_ERROR )
    {
        return BRUSHLESS_INIT_ERROR;
    }

    analog_in_configure_default( &adc_cfg );
    adc_cfg.pin        = cfg->an_pin;
    adc_cfg.channel    = cfg->channel;
    adc_cfg.resolution = cfg->resolution;
    adc_cfg.vref       = cfg->vref;
 
    if ( analog_in_open( &ctx->adc, &adc_cfg ) != ADC_SUCCESS )
    {
        return BRUSHLESS_INIT_ERROR;
    }

    // Output pins 

    digital_out_init( &ctx->dir, cfg->dir );

    // Input pins

    digital_in_init( &ctx->int_pin, cfg->int_pin );

    return BRUSHLESS_OK;
}

void brushless_default_cfg ( brushless_t *ctx )
{
    // Click default configuration 
}

void brushless_set_duty_cycle ( brushless_t *ctx, pwm_data_t duty_cycle )
{
    pwm_set_duty( &ctx->pwm, duty_cycle ); 
}

void brushless_pwm_stop ( brushless_t *ctx )
{
    pwm_stop( &ctx->pwm ); 
}

void brushless_pwm_start ( brushless_t *ctx )
{
    pwm_start( &ctx->pwm ); 
}

adc4_data_t brushless_generic_read ( brushless_t *ctx )
{
    adc4_data_t rx_data;

    rx_data =  analog_in_read( &ctx->adc );
    
    return rx_data;
}

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS


// ------------------------------------------------------------------------- END

