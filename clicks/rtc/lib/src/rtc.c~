/*
 * MikroSDK - MikroE Software Development Kit
 * CopyrightÂ© 2020 MikroElektronika d.o.o.
 * 
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, 
 * publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
 * OR OTHER DEALINGS IN THE SOFTWARE. 
 */

/*!
 * \file
 *
 */

#include "rtc.h"

// ------------------------------------------------------------- PRIVATE MACROS 


// -------------------------------------------------------------- PRIVATE TYPES


// ------------------------------------------------------------------ CONSTANTS


// ------------------------------------------------------------------ VARIABLES


// ---------------------------------------------- PRIVATE FUNCTION DECLARATIONS 


// ------------------------------------------------ PUBLIC FUNCTION DEFINITIONS

void rtc_cfg_setup ( rtc_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
    cfg->sda = HAL_PIN_NC;
    
    // Additional gpio pins

   //cfg->an   = HAL_PIN_NC;
   //cfg->rst = HAL_PIN_NC;
   //cfg->cs   = HAL_PIN_NC;
   //cfg->pwm = HAL_PIN_NC;
    cfg->int_pin = HAL_PIN_NC;

    cfg->i2c_speed = I2C_STANDARD_SPEED; 
    cfg->i2c_address = 0x00;
}

RTC_RETVAL rtc_init ( rtc_t *ctx, rtc_cfg_t *cfg )
{
     i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
    i2c_cfg.speed    = cfg->i2c_speed;
    i2c_cfg.pins.scl = cfg->scl;
    i2c_cfg.pins.sda = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if (  i2c_master_open( &ctx->i2c, &i2c_cfg ) != I2C_SUCCESS )
    {
        return RTC_INIT_ERROR;
    }

    // Output pins 

   //digital_out_init( &ctx->an, cfg->an );
   //digital_out_init( &ctx->rst, cfg->rst );
   //digital_out_init( &ctx->cs, cfg->cs );
   //digital_out_init( &ctx->pwm, cfg->pwm );
   //digital_out_init( &ctx->int_pin, cfg->int_pin );

    // Input pins

   //digital_in_init( &ctx->an, cfg->an );
   //digital_in_init( &ctx->rst, cfg->rst );
   //digital_in_init( &ctx->cs, cfg->cs );
   //digital_in_init( &ctx->pwm, cfg->pwm );
    digital_in_init( &ctx->int_pin, cfg->int_pin );
    
    // Example: Sets pin [high, low] 

    // digital_out_high( &ctx->rst );
    // digital_out_low( &ctx->rst );
	
	// Example: Get pin state 

	// digital_in_read( &ctx->int_pin );

    return RTC_OK;

}

void rtc_default_cfg ( rtc_t *ctx )
{
    // Click default configuration 
}

void rtc_generic_write ( rtc_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
    i2c_master_transfer_t i2c_transfer;
    uint8_t tx_buf[ 256 ];
    uint8_t cnt;
    
    tx_buf[ 0 ] = reg;
    
    for ( cnt = 1; cnt <= len; cnt++ )
    {
        tx_buf[ cnt ] = data_buf[ cnt - 1 ]; 
    }
    
    i2c_transfer.slave_address = ctx->slave_address;
    i2c_transfer.buffer   = tx_buf;
    i2c_transfer.count    = len + 1;
    i2c_transfer.end_mode = I2C_STOP_MODE;

    i2c_master_start( &ctx->i2c );
    i2c_master_write( &ctx->i2c, &i2c_transfer );    
}

void rtc_generic_read ( rtc_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
    i2c_master_transfer_t i2c_transfer;
    uint8_t tx_buf[ 1 ];

    tx_buf [ 0 ] = reg;
    
    i2c_transfer.slave_address = ctx->slave_address;
    i2c_transfer.buffer   = tx_buf;
    i2c_transfer.count    = 1;
    i2c_transfer.end_mode = I2C_RESTART_MODE;

    i2c_master_start( &ctx->i2c );
    i2c_master_write( &ctx->i2c, &i2c_transfer );
    
    i2c_transfer.buffer   = data_buf;
    i2c_transfer.count    = len;
    i2c_transfer.end_mode = I2C_STOP_MODE;

    i2c_master_read( &ctx->i2c, &i2c_transfer );
}

void rtc_enable_disable_counting ( rtc_t *ctx, uint8_t en_dis )
{
    uint8_t temp_w;

    temp_w = 0x00;

    if ( en_dis == 1 )
    {
        rtc_generic_write( ctx, RTC_REG_CONTROL, &temp_w, 1 );
    }
    else if ( en_dis == 0 )
    {
        temp_w = 0x80;

        rtc_generic_write( ctx, RTC_REG_CONTROL, &temp_w, 1 );
    }

}

void rtc_read_time ( rtc_t *ctx )
{
    uint8_t temp;
    
    rtc_generic_read( ctx, RTC_REG_CONTROL, &temp, 1 );
    
    temp &= 0xF7;
    
    rtc_generic_write( ctx, RTC_REG_CONTROL, &temp, 1 );
}

void rtc_read_date ( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_CONTROL, &temp, 1 );

    temp |= 0x08;

    rtc_generic_write( ctx, RTC_REG_CONTROL, &temp, 1 );
}

uint8_t rtc_get_time_hundredth_seconds ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_HUN_SEC, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x70 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_time_hundredth_seconds ( rtc_t *ctx, uint8_t hun_sec )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    hun_sec %= 60;

    ones = hun_sec % 10;

    tens = ( hun_sec / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_HUN_SEC, &temp, 1 );
}

uint8_t rtc_get_time_seconds ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_SEC, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x70 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_time_seconds ( rtc_t *ctx, uint8_t seconds )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    seconds %= 60;

    ones = seconds % 10;

    tens = ( seconds / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_SEC, &temp, 1 );
}

uint8_t rtc_get_time_minutes ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_MIN, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x70 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_time_minutes ( rtc_t *ctx, uint8_t minutes )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    minutes %= 60;

    ones = minutes % 10;

    tens = ( minutes / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_MIN, &temp, 1 );
}

uint8_t rtc_get_time_hours ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_HOUR, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x30 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_time_hours ( rtc_t *ctx, uint8_t hours )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    hours %= 24;

    ones = hours % 10;

    tens = ( hours / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_HOUR, &temp, 1 );
}

uint8_t rtc_get_date_day ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x30 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_date_day ( rtc_t *ctx, uint8_t date_day )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    date_day %= 32;

    if ( date_day == 0 )
    {
        date_day = 1;
    }

    ones = date_day % 10;

    tens = ( date_day / 10 ) << 4;
    
    rtc_generic_read( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );

    temp |= ( tens | ones );

    rtc_generic_write( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );
}

uint8_t rtc_get_date_year ( rtc_t *ctx )
{
    uint8_t result;
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIMER, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0xF0 ) >> 4;

    result = ( 10 * tens ) + ones;

    if ( result % 4 == 0 )
    {
        temp |= 0xC0;
        rtc_generic_write( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );
    }

    return result;
}

void rtc_set_date_year ( rtc_t *ctx, uint16_t date_year )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;
    uint8_t temp_buff[ 2 ];

    ones = 0x00;
    tens = 0x00;

    date_year %= 100;

    ones = date_year % 10;

    tens = ( date_year / 10 ) << 4;

    temp = tens | ones;
    
    if ( date_year % 4 )
    {
        temp |= 0xC0;
        rtc_generic_write( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );
    }
    
    temp_buff[ 0 ] = date_year;
    temp_buff[ 1 ] = date_year >> 8;
    
    rtc_generic_write( ctx, RTC_REG_TIMER, temp_buff, 2 );
}

uint8_t rtc_check_leap_year ( rtc_t *ctx )
{
    uint8_t temp;
    
    temp = 0x00;
    
    rtc_generic_read( ctx, RTC_REG_TIME_DATE_DAY_AND_YEAR, &temp, 1 );
    
    temp >>= 6;

    if ( temp == 0 )
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

uint8_t rtc_get_day_of_the_week ( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH, &temp, 1 );
    
    temp &= 0xE0;
    temp >>= 5;

    return temp;
}

void rtc_set_day_of_the_week ( rtc_t *ctx, uint8_t w_day )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH, &temp, 1 );
    
    w_day %= 7;
    w_day <<= 5;
    
    temp |= w_day;

    rtc_generic_write( ctx, RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH, &w_day, 1 );
}

uint8_t rtc_get_date_month ( rtc_t *ctx )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    uint8_t temp;
    
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x10 ) >> 4;

    result = ( 10 * tens ) + ones;
    
    return result;
}

void rtc_set_date_month ( rtc_t *ctx, uint8_t date_month )
{
    uint8_t ones;
    uint8_t tens;
    uint8_t temp;

    ones = 0x00;
    tens = 0x00;

    date_month %= 13;

    if ( date_month == 0 )
    {
        date_month = 1;
    }

    ones = date_month % 10;

    tens = ( date_month / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH, &temp, 1 );
}

void rtc_set_time ( rtc_t *ctx, uint8_t time_hours, uint8_t time_minutes, uint8_t time_seconds, uint8_t time_hun_sec )
{
    rtc_set_time_hours( ctx, time_hours );
    rtc_set_time_minutes( ctx, time_minutes );
    rtc_set_time_seconds( ctx, time_seconds );
    rtc_set_time_hundredth_seconds( ctx, time_hun_sec );
    
    rtc_enable_disable_counting( ctx, 1 );
}

void rtc_get_time ( rtc_t *ctx, uint8_t *time_hours, uint8_t *time_minutes, uint8_t *time_seconds, uint8_t *time_hun_sec )
{
    *time_hours = rtc_get_time_hours( ctx );
    *time_minutes = rtc_get_time_minutes( ctx );
    *time_seconds = rtc_get_time_seconds( ctx );
    *time_hun_sec = rtc_get_time_hundredth_seconds( ctx );
}

void rtc_set_date ( rtc_t *ctx, uint8_t day_of_the_week, uint8_t date_day, uint8_t date_month, uint16_t date_year )
{
    rtc_set_day_of_the_week( ctx, day_of_the_week );
    rtc_set_date_day( ctx, date_day );
    rtc_set_date_month( ctx, date_month );
    rtc_set_date_year( ctx, date_year );
    
    rtc_enable_disable_counting( ctx, 1 );
}

void rtc_get_date ( rtc_t *ctx, uint8_t *day_of_the_week, uint8_t *date_day, uint8_t *date_month, uint16_t *date_year )
{
    *day_of_the_week = rtc_get_day_of_the_week( ctx );
    *date_day = rtc_get_date_day( ctx );
    *date_month = rtc_get_date_month( ctx );
    *date_year = rtc_get_date_year( ctx );
}

void rtc_enableAlarm ( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_CONTROL, &temp, 1 );
    
    temp |= 0x04;

    rtc_generic_write( ctx, RTC_REG_CONTROL, &temp, 1 );
}

void rtc_disable_alarm ( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_CONTROL, &temp, 1 );

    temp &= 0xFB;

    rtc_generic_write( ctx, RTC_REG_CONTROL, &temp, 1 );
}

void rtc_set_alarm_hun_sec ( rtc_t *ctx, uint8_t hun_sec )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x01;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );
    
    temp = 0x00;
    ones = 0x00;
    tens = 0x00;
    
    hun_sec %= 100;

    ones = hun_sec % 10;

    tens = ( hun_sec / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_HUN_SEC, &temp, 1 );
    
}

uint8_t rtc_get_alarm_hun_sec ( rtc_t *ctx )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;
    uint8_t result;

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_SEC, &temp, 1 );


    ones = temp & 0x0F;

    tens = ( temp & 0xF0 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;

}

void rtc_set_alarm_seconds ( rtc_t *ctx, uint8_t seconds )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x02;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    seconds %= 60;

    ones = seconds % 10;

    tens = ( seconds / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_SEC, &temp, 1 );
}

uint8_t rtc_get_alarm_seconds ( rtc_t *ctx )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;
    uint8_t result;

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_SEC, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x70 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_alarm_minutes ( rtc_t *ctx, uint8_t minutes )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x03;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    minutes %= 60;

    ones = minutes % 10;

    tens = ( minutes / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_MIN, &temp, 1 );
}

uint8_t rtc_get_alarm_minutes ( rtc_t *ctx )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;
    uint8_t result;

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_MIN, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x70 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_alarm_hours ( rtc_t *ctx, uint8_t hours )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x04;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    hours %= 24;

    ones = hours % 10;

    tens = ( hours / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_HOUR, &temp, 1 );
}

uint8_t rtc_get_alarm_hours ( rtc_t *ctx )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;
    uint8_t result;

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_HOUR, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x30 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_set_time_alarm ( rtc_t *ctx, uint8_t time_hours, uint8_t time_minutes, uint8_t time_seconds, uint8_t time_hun_sec )
{
    rtc_setAlarmHours( time_hours );
    rtc_setAlarmMinutes( time_minutes );
    rtc_setAlarmSeconds( time_seconds );
    rtc_setAlarmHunSec( time_hun_sec );

    rtc_enable_disable_counting( ctx, 1 );
}

void rtc_get_time_alarm ( rtc_t *ctx, uint8_t *time_hours, uint8_t *time_minutes, uint8_t *time_seconds, uint8_t *time_hun_sec )
{
    *time_hours = rtc_get_alarm_hours();
    *time_minutes = rtc_get_alarm_minutes();
    *time_seconds = rtc_get_alarm_seconds();
    *time_hun_sec = rtc_get_alarm_hun_sec();
}

void rtc_set_alarm_days ( rtc_t *ctx, uint8_t days )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x05;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    days %= 31;

    ones = days % 10;

    tens = ( days / 10 ) << 4;

    temp = tens | ones;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_DATE_DAY_AND_YEAR, &temp, 1 );
}

uint8_t rtc_get_alarm_days ( rtc_t *ctx )
{
    uint8_t temp;
    uint8_t ones;
    uint8_t tens;
    uint8_t result;
    
    temp = 0x00;
    ones = 0x00;
    tens = 0x00;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_DATE_DAY_AND_YEAR, &temp, 1 );

    ones = temp & 0x0F;

    tens = ( temp & 0x30 ) >> 4;

    result = ( 10 * tens ) + ones;

    return result;
}

void rtc_enable_interrupt( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp |= 0x80;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );
}

void rtc_disable_interrupt( rtc_t *ctx )
{
    uint8_t temp;

    rtc_generic_read( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );

    temp &= 0x7F;

    rtc_generic_write( ctx, RTC_REG_TIME_ALARM_CONTROL, &temp, 1 );
}

uint8_t rtc_get_interrupt( rtc_t *ctx )
{
    uint8_t inter;

    inter = digital_in_read( &ctx->int_pin );

    return inter;
}
// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS



// ------------------------------------------------------------------------- END

