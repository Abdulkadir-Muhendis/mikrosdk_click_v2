/*
 * MikroSDK - MikroE Software Development Kit
 * CopyrightÂ© 2020 MikroElektronika d.o.o.
 * 
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, 
 * publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
 * OR OTHER DEALINGS IN THE SOFTWARE. 
 */

/*!
 * \file
 *
 * \brief This file contains API for RTC Click driver.
 *
 * \addtogroup rtc RTC Click Driver
 * @{
 */
// ----------------------------------------------------------------------------

#ifndef RTC_H
#define RTC_H

#include "drv_digital_out.h"
#include "drv_digital_in.h"
#include "drv_i2c_master.h"


// -------------------------------------------------------------- PUBLIC MACROS 
/**
 * \defgroup macros Macros
 * \{
 */

/**
 * \defgroup map_mikrobus MikroBUS
 * \{
 */
#define RTC_MAP_MIKROBUS( cfg, mikrobus ) \
  cfg.scl  = MIKROBUS( mikrobus, MIKROBUS_SCL ); \
  cfg.sda  = MIKROBUS( mikrobus, MIKROBUS_SDA ); \
  cfg.int_pin = MIKROBUS( mikrobus, MIKROBUS_INT ); 
/** \} */

/**
 * \defgroup error_code Error Code
 * \{
 */
#define RTC_RETVAL  uint8_t

#define RTC_OK           0x00
#define RTC_INIT_ERROR   0xFF
/** \} */

/**
 * \defgroup slave_addr Slave Address
 * \{
 */
#define RTC_I2C_ADDRESS_0                                                  0x50
#define RTC_I2C_ADDRESS_1                                                  0x51
/** \} */

/**
 * \defgroup reg_addr Register Address
 * \{
 */
#define RTC_REG_CONTROL                                             0x00
#define RTC_REG_TIME_HUN_SEC                                        0x01
#define RTC_REG_TIME_SEC                                            0x02
#define RTC_REG_TIME_MIN                                            0x03
#define RTC_REG_TIME_HOUR                                           0x04
#define RTC_REG_TIME_DATE_DAY_AND_YEAR                              0x05
#define RTC_REG_TIME_DAY_OF_THE_WEEK_AND_MONTH                      0x06
#define RTC_REG_TIMER                                               0x07
#define RTC_REG_TIME_ALARM_CONTROL                                  0x08
#define RTC_REG_TIME_ALARM_HUN_SEC                                  0x09
#define RTC_REG_TIME_ALARM_SEC                                      0x0A
#define RTC_REG_TIME_ALARM_MIN                                      0x0B
#define RTC_REG_TIME_ALARM_HOUR                                     0x0C
#define RTC_REG_TIME_ALARM_DATE_DAY_AND_YEAR                        0x0D
#define RTC_REG_TIME_ALARM_DAY_OF_THE_WEEK_AND_MONTH                0x0E
#define RTC_REG_TIME_ALARM_TIMER                                    0x0F
/** \} */

/** \} */ // End group macro 
// --------------------------------------------------------------- PUBLIC TYPES
/**
 * \defgroup type Types
 * \{
 */

/**
 * @brief Click ctx object definition.
 */
typedef struct
{
    // Input pins 

    digital_in_t int_pin;
    
    // Modules 

    i2c_master_t i2c;

    // ctx variable 

    hal_i2c_address_t slave_address;

    // time and date data

    date_data_t date;
    time_data_t time;

} rtc_t;

/**
 * @brief Click configuration structure definition.
 */
typedef struct
{
    // Communication gpio pins 

    pin_name_t scl;
    pin_name_t sda;
    
    // Additional gpio pins 

    pin_name_t int_pin;

    // static variable 

    hal_i2c_speed_t i2c_speed;
    hal_i2c_address_t i2c_address;

} rtc_cfg_t;

typedef struct
{
  
  uint8_t day_of_the_week;
  uint8_t date_day;
  uint8_t date_month;
  uint16_t date_year;

} date_data_t;

typedef struct
{

  uint8_t time_hours;
  uint8_t time_minutes;
  uint8_t time_seconds;
  int8_t time_hun_sec;

} time_data_t;

/** \} */ // End types group
// ------------------------------------------------------------------ CONSTANTS
/**
 * \defgroup constants Constants
 * \{
 */
 
 

/** \} */ // End constants group
// ------------------------------------------------------------------ VARIABLES
/**
 * \defgroup variable Variable
 * \{
 */


/** \} */ // End variable group
// ----------------------------------------------- PUBLIC FUNCTION DECLARATIONS

/**
 * \defgroup public_function Public function
 * \{
 */
 
#ifdef __cplusplus
extern "C"{
#endif

/**
 * @brief Config Object Initialization function.
 *
 * @param cfg  Click configuration structure.
 *
 * @description This function initializes click configuration structure to init state.
 * @note All used pins will be set to unconnected state.
 */
void rtc_cfg_setup ( rtc_cfg_t *cfg );

/**
 * @brief Initialization function.
 * @param rtc Click object.
 * @param cfg Click configuration structure.
 * 
 * @description This function initializes all necessary pins and peripherals used for this click.
 */
RTC_RETVAL rtc_init ( rtc_t *ctx, rtc_cfg_t *cfg );

/**
 * @brief Click Default Configuration function.
 *
 * @param ctx  Click object.
 *
 * @description This function executes default configuration for Rtc click.
 */
void rtc_default_cfg ( rtc_t *ctx );

/**
 * @brief Generic write function.
 *
 * @param ctx          Click object.
 * @param reg          Register address.
 * @param data_buf     Data buf to be written.
 * @param len          Number of the bytes in data buf.
 *
 * @description This function writes data to the desired register.
 */
void rtc_generic_write ( rtc_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len );

/**
 * @brief Generic read function.
 *
 * 
 * @param ctx          Click object.
 * @param reg          Register address.
 * @param data_buf     Output data buf
 * @param len          Number of the bytes to be read
 *
 * @description This function reads data from the desired register.
 */
void rtc_generic_read ( rtc_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len );


void rtc_enable_disable_counting ( rtc_t *ctx, uint8_t en_dis );

void rtc_read_time ( rtc_t *ctx );

void rtc_read_date ( rtc_t *ctx );

uint8_t rtc_get_time_hundredth_seconds ( rtc_t *ctx );

void rtc_set_time_hundredth_seconds ( rtc_t *ctx, uint8_t hun_sec );

uint8_t rtc_get_time_seconds ( rtc_t *ctx );

void rtc_set_time_seconds ( rtc_t *ctx, uint8_t seconds );

uint8_t rtc_get_time_minutes ( rtc_t *ctx );

void rtc_set_time_minutes ( rtc_t *ctx, uint8_t minutes );

uint8_t rtc_get_time_hours ( rtc_t *ctx );

void rtc_set_time_hours ( rtc_t *ctx, uint8_t hours );

uint8_t rtc_get_date_day ( rtc_t *ctx );

void rtc_set_date_day ( rtc_t *ctx, uint8_t date_day );

uint8_t rtc_get_date_year ( rtc_t *ctx );

void rtc_set_date_year ( rtc_t *ctx, uint16_t date_year );

uint8_t rtc_check_leap_year ( rtc_t *ctx );

uint8_t rtc_get_day_of_the_week ( rtc_t *ctx );

void rtc_set_day_of_the_week ( rtc_t *ctx, uint8_t w_day );

uint8_t rtc_get_date_month ( rtc_t *ctx );

void rtc_set_date_month ( rtc_t *ctx, uint8_t date_month );

void rtc_set_time ( rtc_t *ctx, uint8_t time_hours, uint8_t time_minutes, uint8_t time_seconds, uint8_t time_hun_sec );

void rtc_get_time ( rtc_t *ctx, uint8_t *time_hours, uint8_t *time_minutes, uint8_t *time_seconds, uint8_t *time_hun_sec );

void rtc_set_date ( rtc_t *ctx, uint8_t day_of_the_week, uint8_t date_day, uint8_t date_month, uint16_t date_year );

void rtc_get_date ( rtc_t *ctx, uint8_t *day_of_the_week, uint8_t *date_day, uint8_t *date_month, uint16_t *date_year );

void rtc_enableAlarm ( rtc_t *ctx );

void rtc_disable_alarm ( rtc_t *ctx );

void rtc_set_alarm_hun_sec ( rtc_t *ctx, uint8_t hun_sec );

uint8_t rtc_get_alarm_hun_sec ( rtc_t *ctx );

void rtc_set_alarm_seconds ( rtc_t *ctx, uint8_t seconds );

uint8_t rtc_get_alarm_seconds ( rtc_t *ctx );

void rtc_set_alarm_minutes ( rtc_t *ctx, uint8_t minutes );

uint8_t rtc_get_alarm_minutes ( rtc_t *ctx );

void rtc_set_alarm_hours ( rtc_t *ctx, uint8_t hours );

uint8_t rtc_get_alarm_hours ( rtc_t *ctx );

void rtc_set_time_alarm ( rtc_t *ctx, uint8_t time_hours, uint8_t time_minutes, uint8_t time_seconds, uint8_t time_hun_sec );

void rtc_get_time_alarm ( rtc_t *ctx, uint8_t *time_hours, uint8_t *time_minutes, uint8_t *time_seconds, uint8_t *time_hun_sec );

void rtc_set_alarm_days ( rtc_t *ctx, uint8_t days );

uint8_t rtc_get_alarm_days ( rtc_t *ctx );

void rtc_enable_interrupt( rtc_t *ctx );

void rtc_disable_interrupt( rtc_t *ctx );

uint8_t rtc_get_interrupt( rtc_t *ctx );

#ifdef __cplusplus
}
#endif
#endif  // _RTC_H_

/** \} */ // End public_function group
/// \}    // End click Driver group  
/*! @} */
// ------------------------------------------------------------------------- END
